---

# Specifies how the nginx configuration should be generated with regard to how services (nextcloud-nginx-proxy-companion) are reached.
#
# Known values are: `container` and `local`
nextcloud_nginx_proxy_service_reach_mode: container

# nextcloud_nginx_proxy_service_reach_local_port contains the reverse-proxy-companion local port
# when `nextcloud_nginx_proxy_service_reach_mode: local`.
#
# The port number here needs to match `nextcloud_reverse_proxy_companion_http_bind_port`.
nextcloud_nginx_proxy_service_reach_local_port: 0

nextcloud_nginx_proxy_container_image: "docker.io/nginx:1.23.2-alpine"
#"{{ nextcloud_reverse_proxy_companion_container_image }}"
nextcloud_nginx_proxy_container_image_force_pull: "{{ nextcloud_nginx_proxy_container_image.endswith(':latest') }}"

nextcloud_nginx_proxy_base_path: "{{ nextcloud_base_path }}/nginx-proxy"
nextcloud_nginx_proxy_bin_path: "{{ nextcloud_nginx_proxy_base_path }}/bin"
nextcloud_nginx_proxy_confd_path: "{{ nextcloud_nginx_proxy_base_path }}/conf.d"

nextcloud_nginx_proxy_client_max_body_size: "4G"
#"{{ nextcloud_reverse_proxy_companion_client_max_body_size }}"

nextcloud_nginx_proxy_ssl_protocols: "TLSv1.2 TLSv1.3"
nextcloud_ssl_base_path: "{{ nextcloud_base_data_path }}/ssl"
nextcloud_ssl_config_dir_path: "{{ nextcloud_ssl_base_path }}/config"
nextcloud_ssl_log_dir_path: "{{ nextcloud_ssl_base_path }}/log"
nextcloud_ssl_support_email: "{{ host_specific_nextcloud_ssl_support_email }}"
nextcloud_ssl_certbot_docker_image: "docker.io/certbot/certbot:{{ nextcloud_ssl_architecture }}-v1.31.0"
nextcloud_ssl_certbot_standalone_http_port: 2403
nextcloud_ssl_use_staging: false
# Specifies when to try and renew SSL certificates
nextcloud_nginx_proxy_ssl_certificate_renew_schedule: "*-*-* 04:00:00"
nextcloud_nginx_proxy_ssl_certificate_renew_randomized_delay: 2h

# Specifies when to reload nginx-proxy so that a new SSL certificate could go into effect
nextcloud_nginx_proxy_reload_schedule: "*-*-* 06:30:00"
nextcloud_nginx_proxy_reload_randomized_delay: 1h

nextcloud_nginx_proxy_ssl_architecture: |-
  {{
  	{
  		'amd64': 'amd64',
  		'arm32': 'arm32v6',
  		'arm64': 'arm64v8',
  	}[nextcloud_architecture]
  }}

nextcloud_nginx_proxy_ssl_base_path: "{{ nextcloud_nginx_proxy_base_path }}/ssl"
nextcloud_nginx_proxy_ssl_config_dir_path: "{{ nextcloud_nginx_proxy_ssl_base_path }}/config"
nextcloud_nginx_proxy_ssl_log_dir_path: "{{ nextcloud_nginx_proxy_ssl_base_path }}/log"
# Email address to pass to Let's Encrypt when obtaining SSL certificates for your domain.
nextcloud_nginx_proxy_ssl_support_email: ''
nextcloud_nginx_proxy_ssl_certbot_container_image: "docker.io/certbot/certbot:{{ nextcloud_nginx_proxy_ssl_architecture }}-v2.0.0"
nextcloud_nginx_proxy_ssl_certbot_container_image_force_pull: "{{ nextcloud_nginx_proxy_ssl_certbot_container_image.endswith(':latest') }}"
nextcloud_nginx_proxy_ssl_certbot_standalone_http_port: 2403
nextcloud_nginx_proxy_ssl_use_staging: false

# Controls from which Certificate Authority server to retrieve the SSL certificates (passed as a `--server` flag to Certbot).
# By default, we use the Let's Encrypt production environment (use `matrix_ssl_lets_encrypt_staging` for using the staging environment).
# Learn more here: https://eff-certbot.readthedocs.io/en/stable/using.html#changing-the-acme-server
nextcloud_nginx_proxy_ssl_lets_encrypt_server: ''

# Tells which interface and port the Let's Encrypt (certbot) container should try to bind to
# when it tries to obtain initial certificates in standalone mode.
#
# This should normally be a public interface and port.
# If you'd like to not bind on all IP addresses, specify one explicitly (e.g. `a.b.c.d:80`)
nextcloud_nginx_proxy_ssl_lets_encrypt_container_standalone_http_host_bind_port: '80'

# Specify key type of the private key algorithm.
# Learn more here: https://eff-certbot.readthedocs.io/en/stable/using.html#using-ecdsa-keys
nextcloud_nginx_proxy_ssl_lets_encrypt_key_type: ecdsa

# By default, this playbook automatically retrieves and auto-renews
# free SSL certificates from Let's Encrypt.
#
# The following retrieval methods are supported:
# - "lets-encrypt" - the playbook obtains free SSL certificates from Let's Encrypt
# - "none" - lets you manage certificates by yourself; it doesn't care if you don't drop certificates in the location it expects
#
# If you decide to manage certificates by yourself (`nextcloud_nginx_proxy_ssl_retrieval_method: none`),
# you'd need to drop them into the directory specified by `nextcloud_nginx_proxy_ssl_config_dir_path`
# obeying the following hierarchy:
# - <nextcloud_nginx_proxy_ssl_config_dir_path>/live/<domain>/fullchain.pem
# - <nextcloud_nginx_proxy_ssl_config_dir_path>/live/<domain>/privkey.pem
# where <domain> refers to the domains that you need (usually `nextcloud_server_fqn_nextcloud`).
#
# The "none" type (`nextcloud_nginx_proxy_ssl_retrieval_method: none`), simply means that no certificate retrieval will happen.
# It's useful for when you'll be using another reverse-proxy server (like Apache) with your own certificates, managed by yourself.
nextcloud_nginx_proxy_ssl_retrieval_method: "lets-encrypt"

# The full list of domains that this role will obtain certificates for.
# This variable is likely redefined outside of the role, to include the domains that are necessary (depending on the services that are enabled).
# To add additional domain names, consider using `nextcloud_nginx_proxy_ssl_additional_domains_to_obtain_certificates_for` instead.

nextcloud_nginx_proxy_ssl_domains_to_obtain_certificates_for: |
  {{
    ([nextcloud_server_fqn_nextcloud])
    +
    nextcloud_nginx_proxy_ssl_additional_domains_to_obtain_certificates_for
  }}

# A list of additional domain names to obtain certificates for.
nextcloud_nginx_proxy_ssl_additional_domains_to_obtain_certificates_for: []
